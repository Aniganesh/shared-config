{"id":1,"parentId":-1,"label":"snippets","lastId":18,"folder":true,"children":[{"id":2,"parentId":1,"label":"React","folder":true,"children":[{"id":3,"parentId":2,"label":"FC-no classes","value":"import React, { FC } from 'react';\n\ninterface ComponentProps { }\n\nexport const Component: FC<ComponentProps> = (props) => {\n\treturn <>component</>;\n};\n\nexport default Component;","children":[],"resolveSyntax":true,"language":".tsx","description":"create A React Functional Component with types","prefix":"srfc"},{"id":15,"parentId":2,"label":"FC-Function syntax","value":"import React from 'react';\n\ninterface ComponentProps {}\n\nexport function Component(props: ComponentProps) {\n  return <>component</>;\n}\n\nexport default Component;\n","language":".tsx","children":[],"resolveSyntax":false,"description":"Create a React functional component using function syntax","prefix":"srfcfs"},{"id":8,"parentId":2,"label":"Sass, Proptypes FC","value":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nexport const Component = (props) => {\n\treturn <>component</>;\n};\n\nexport default Component;\n\nComponent.propTypes ={\n\n}","children":[],"resolveSyntax":true},{"id":12,"parentId":2,"label":"ViewModel","value":"import { Context, createContext, useState } from \"react\";\nimport ViewModel from \"../../Core/@types\";\n\nconst useHome = () => {\n  const [state, setState] = useState<number>(0);\n  return { state, setState };\n};\n\ninterface HomeViewModelState {\n  state: number;\n  setState: (newState: number) => void;\n}\n\nexport const Home: Context<HomeViewModelState> = createContext({\n  state: 0,\n  setState: (newState: number) => {\n    console.error(\"set state used outside context!\");\n  },\n});\n\nexport default class HomeViewModel implements ViewModel<HomeViewModelState> {\n  Hook = useHome;\n\n  CtxProvider = Home.Provider;\n}\n","children":[],"resolveSyntax":true},{"id":9,"parentId":2,"label":"Storybook","value":"import React from 'react';\n\nimport { ComponentName } from '../components/ComponentName/index.jsx';\n\nexport default {\n    title: 'Example/ComponentName',\n    component: ComponentName,\n    parameters: {\n        // More on Story layout: https://storybook.js.org/docs/react/configure/story-layout\n        layout: 'fullscreen',\n    },\n};\n\nconst Template = (args) => <ComponentName {...args} />;\n\n// More on interaction testing: https://storybook.js.org/docs/react/writing-tests/interaction-testing\nexport const Main = Template.bind({});\n","children":[]},{"id":4,"parentId":2,"label":"FC-classes","value":"import React, { FC } from 'react';\nimport { makeStyles } from '@material-ui/core';\n\ninterface ComponentProps { }\n\nconst Component: FC<ComponentProps> = (props) => {\n\tconst classes = styles();\n\treturn <>component</>;\n};\n\nexport default Component;\n\nconst styles = makeStyles((theme) => ({\n\n}));","children":[],"resolveSyntax":true},{"id":17,"parentId":2,"label":"ReactWithZod","value":"import { FC } from \"react\";\nimport { z } from \"zod\";\n\nexport const componentSchema = z.object({});\n\nexport const Component: FC<z.infer<typeof componentSchema>> = (props) => {\n  return <>Component</>;\n};\n\nexport default Component;\n","language":".tsx","children":[],"resolveSyntax":false,"description":"React function component specified in a zod schema","prefix":"r-Zod"}]},{"id":13,"parentId":1,"label":"React+RN common","folder":true,"children":[{"id":11,"parentId":13,"label":"Context","value":"import React, { createContext, PropsWithChildren, FC } from \"react\";\n\ninterface XContextState {\n\t\n}\n\nconst XContext = createContext<XContextState>({\n\n});\n\nconst XContextProvider: FC<PropsWithChildren> = ({ children, ...props }) => {\n  return <XContext.Provider value={props}>{children}</XContext.Provider>;\n};\n\nexport default XContextProvider;\n","children":[],"resolveSyntax":true,"language":"","description":"","prefix":"context"},{"id":5,"parentId":13,"label":"SimpleHook","value":"import { useState } from 'react';\n\nconst useXHook = () => {\n\tconst [state, setState] = useState();\n\treturn { state, setState };\n};\n\nexport default useXHook;\n","children":[],"resolveSyntax":true,"language":".ts","description":"React hook","prefix":"simpleHook"},{"id":10,"parentId":13,"label":"Zustand store","value":"import { create } from \"zustand\"; \n\nexport interface RootStoreType { }\n\nexport const useStore = create<StoreType>((set) => ({\n\n}));\n\n","children":[],"resolveSyntax":true,"language":".ts","description":"Create root zustand store","prefix":"root-Store"},{"id":16,"parentId":13,"label":"zustand slice","value":"import { StateCreator } from \"zustand\";\nimport { GlobalStore } from \".\";\n\n\nexport interface XSlice {\n}\n\nexport const createXSlice: StateCreator<GlobalStore, [], [], XSlice> = (\n  set,\n  getSliceState,\n  state\n) => ({\n\n});\n","language":".ts","children":[],"resolveSyntax":false,"description":"Create zustand slice","prefix":"zustand-Slice"}]},{"id":14,"parentId":1,"label":"RN","folder":true,"children":[{"id":7,"parentId":14,"label":"rn-FC","value":"import React, { FC } from 'react';\nimport { Text } from 'react-native';\n\ninterface ComponentProps {}\n\nexport const Component: FC<ComponentProps> = (props) => {\n\treturn <Text>component</Text>;\n};\n\nexport default Component;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst styles = {};\n","children":[],"resolveSyntax":true,"language":".tsx","description":"React native functional component","prefix":"rn-FC"}]},{"id":6,"parentId":1,"label":"chardan-component","value":"<script transform>\n  {\n    _t: (obj, data, resolver, html, stringOps, cmpLogger) => {\n        return {}\n    }\n  }\n</script>\n<script mock>\n  {\n    _t: (obj, data, resolver, html, stringOps, cmpLogger) => {\n        return {}\n    }\n  }\n</script>\n\n<template>\n\t<section class=\"cmp_\">\n\n\t</section>\n</template>\n\n<script>\n\t(function () { \n\t\t$('.cmp_').each((i, elem)=>{\n                 })\n\t})();\n</script>\n\n<style>\n.cmp_ {\n\t\n}\n</style>","children":[],"resolveSyntax":true},{"id":18,"parentId":1,"label":"rn-svgicon","value":"import React, { FC } from \"react\";\nimport { IconProps } from \".\";\nimport { Svg, G, Path } from \"react-native-svg\";\nimport { colors } from \"app/theme\";\n\ninterface ComponentProps extends IconProps {}\nexport const Component: FC<ComponentProps> = ({ style, color = colors.maintext }) => {\n  return (\n    <Svg\n      style={style}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n    >\n\t\t\n\t</Svg>\n  );\n};\n\nexport default Component;\n","children":[]}]}